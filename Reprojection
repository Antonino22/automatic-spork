import matplotlib.pyplot as plt 
from mpl_toolkits.basemap import Basemap 
from netCDF4 import Dataset
from remap import remap
from cpt_convert import loadCPT
from matplotlib.colors import LinearSegmentedColormap # Linear interpolation for color maps

 
# Load the Data 
# Path to the GOES-16 image file
path = '/Volumes/Anthonys_backup/Masters_Thesis/Satellite_Data/new2/C13/OR_ABI-L2-CMIPF-M3C13_G16_s20180400500385_e20180400511163_c20180400511242.nc'
nc = Dataset(path)

# Get the latitude and longitude image bounds
geo_extent = nc.variables['geospatial_lat_lon_extent']
min_lon = float(geo_extent.geospatial_westbound_longitude)
max_lon = float(geo_extent.geospatial_eastbound_longitude)
min_lat = float(geo_extent.geospatial_southbound_latitude)
max_lat = float(geo_extent.geospatial_northbound_latitude)

# Choose the visualization extent (min lon, min lat, max lon, max lat)
#extent = [-90.0, -40.0, -20.0, 10.0]
extent = [min_lon, min_lat, max_lon, max_lat]
 
# Choose the image resolution (the higher the number the faster the processing is)
resolution = .7

# Calculate the image extent required for the reprojection
H = nc.variables['goes_imager_projection'].perspective_point_height
x1 = nc.variables['x_image_bounds'][0] * H
x2 = nc.variables['x_image_bounds'][1] * H
y1 = nc.variables['y_image_bounds'][1] * H
y2 = nc.variables['y_image_bounds'][0] * H

# Projection Prameters 
lat_0 = nc.variables['goes_imager_projection'].latitude_of_projection_origin
lon_0 = nc.variables['goes_imager_projection'].longitude_of_projection_origin
a = nc.variables['goes_imager_projection'].semi_major_axis
b = nc.variables['goes_imager_projection'].semi_minor_axis
f = 1/nc.variables['goes_imager_projection'].inverse_flattening

# Call the reprojection funcion
grid = remap(path, extent, resolution, x1, y1, x2, y2)

# Define the size of the saved picture
DPI = 150
ax = plt.figure(figsize=(2000/float(DPI), 2000/float(DPI)), frameon=True, dpi=DPI)
 
# Read the data returned by the function
data = grid.ReadAsArray()
 
# Plot the Data 
# Create the basemap reference for the Rectangular Projection
bmap = Basemap(llcrnrlon=extent[0], llcrnrlat=extent[1], urcrnrlon=extent[2], urcrnrlat=extent[3], epsg=4326)

# Draw the countries and Argentinian states shapefiles
bmap.readshapefile('/Users/anthonycrespo/Desktop/Satelite/arg_adm1/ARG_adm1','ARG_adm1',linewidth=.5,color='black')
bmap.readshapefile('/Users/anthonycrespo/Desktop/Satelite/Countries_Shape/ne_10m_admin_0_countries','ne_10m_admin_0_countries',linewidth=.7,color='black')
 
# Draw parallels and meridians
bmap.drawcoastlines(linewidth=1., linestyle='solid', color='black')
bmap.drawparallels(np.arange(-90.0, 90.0, 10.0), linewidth=0.25, color='white', labels=[True,False,False,True])
bmap.drawmeridians(np.arange(0.0, 360.0, 10.0), linewidth=0.25, color='white', labels=[True,False,False,True])
 
# Converts a CPT file to be used in Python
cpt = loadCPT('/Users/anthonycrespo/Desktop/Satelite/IR4AVHRR6.cpt')

# Makes a linear interpolation
cpt_convert = LinearSegmentedColormap('cpt', cpt)
 
# Plot the GOES-16 channel with the converted CPT colors
bmap.imshow(data, origin='upper', cmap=cpt_convert, vmin=170, vmax=378)

# Date and time
import datetime
    
time_var = nc.time_coverage_start
iyear = time_var[0:4]
imonth = time_var[5:7]
    
import calendar
    
cmonth = calendar.month_abbr[int(imonth)]
iday = time_var[8:10]
itime = time_var[11:19]
itimehr = time_var[11:13]
itimemn = time_var[14:16]

ctime_string = iyear +' '+cmonth+' '+iday+'  '+itime+' GMT'
ctime_file_string = iyear + imonth + iday + itimehr + itimemn

filestring = "C13_" + iyear + imonth + iday + "_" + itimehr + itimemn + ".jpg"
time_string = 'GOES-16 ABI Band 13\n"Clean" LW IR Window\n%s '%ctime_string

    
# Add a title to the plot
plt.title('GOES-16 Band 13\n"Clean" LW IR Window\n%s '%ctime_string)

# Insert the legend at the bottom
bmap.colorbar(location='right', label='Brightness Temperature [K]')
 
# Show the plot
plt.show()
